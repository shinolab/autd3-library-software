on:
  push:
    tags:
    - 'v*'

name: Upload Release Asset

jobs:   
  release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
        
  publish_win:
    needs: [release]
    name: Upload Release Asset Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-win';
      - name: Checkout submodules
        run: git submodule update --init --force --recursive
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
      - name: Build project x64
        run: |
          cd client
          cmake -G "Visual Studio 17 2022" -A x64 -B "build" -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF
          cd build
          msbuild autd3.sln /t:build /p:Configuration=Release -maxcpucount
          mkdir publish
          mkdir publish/lib
          mkdir publish/lib/wpcap
          mkdir publish/bin
          cd ../..
          copy client/build/lib/Release/*.lib client/build/publish/lib
          copy client/lib/link/soem/Lib/LICENSE client/build/publish/lib/wpcap
          copy client/lib/link/soem/Lib/x64/*.lib client/build/publish/lib/wpcap
          copy client/build/bin/Release/*.dll client/build/publish/bin
          Compress-Archive -Path LICENSE, NOTICE, dist/AUTDServer, dist/firmware, client/include, client/build/publish/lib, client/build/publish/bin -DestinationPath assets_x64.zip
      - name: Build project x86
        run: |
          cd client
          cmake -G "Visual Studio 17 2022" -A Win32 -B "build_x86" -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF
          cd build_x86
          msbuild autd3.sln /t:build /p:Configuration=Release -maxcpucount
          mkdir publish
          mkdir publish/lib
          mkdir publish/lib/wpcap
          mkdir publish/bin
          cd ../..
          copy client/build_x86/lib/Release/*.lib client/build_x86/publish/lib
          copy client/lib/link/soem/Lib/LICENSE client/build/publish/lib/wpcap
          copy client/lib/link/soem/Lib/*.lib client/build/publish/lib/wpcap
          copy client/build_x86/bin/Release/*.dll client/build_x86/publish/bin
          Compress-Archive -Path LICENSE, NOTICE, dist/AUTDServer, dist/firmware, client/include, client/build_x86/publish/lib, client/build_x86/publish/bin -DestinationPath assets_x86.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          $value=cat release_url/release_url.txt
          echo "::set-output name=upload_url::$value"
      - name: Upload Release Asset
        id: upload-release-asset-win64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset
        id: upload-release-asset-win32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x86.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x86.zip
          asset_content_type: application/zip
  
  publish_linux:
    needs: [release]
    name: Upload Release Asset Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';
      - name: Checkout submodules
        run: git submodule update --init --force --recursive
      - name: install gcc-10
        run: |
          sudo apt update
          sudo apt install gcc-10 g++-10 g++-arm-linux-gnueabihf g++-aarch64-linux-gnu -y
        shell: bash
      - name: Build project x64
        run: |
          cd client
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF
          make -j8
          cd ../..
          mkdir -p lib
          mkdir -p bin
          cp -f client/build/lib/*.a lib
          cp -f client/build/bin/*.so bin
          cp -rf dist/firmware firmware/
          cp -rf client/include include/
          tar -zcvf assets_x64.tar.gz firmware include lib bin LICENSE NOTICE 
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Build project arm32
        run: |
          cd client
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM32 -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF
          make -j8
          cd ../..
          mkdir -p lib
          mkdir -p bin
          cp -f client/build/lib/*.a lib
          cp -f client/build/bin/*.so bin
          cp -rf dist/firmware firmware/
          cp -rf client/include include/
          tar -zcvf assets_arm32.tar.gz firmware include lib bin LICENSE NOTICE
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Build project arm64
        run: |
          cd client
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_TARGET=ARM64 -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF
          make -j8
          cd ../..
          mkdir -p lib
          mkdir -p bin
          cp -f client/build/lib/*.a lib
          cp -f client/build/bin/*.so bin
          cp -rf dist/firmware firmware/
          cp -rf client/include include/
          tar -zcvf assets_arm64.tar.gz firmware include lib bin LICENSE NOTICE
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset-x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-x64.tar.gz
          asset_content_type: application/octet-stream
      - name: Upload Release Asset ARM32
        id: upload-release-asset-arm32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_arm32.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-arm32.tar.gz
          asset_content_type: application/octet-stream
      - name: Upload Release Asset ARM64
        id: upload-release-asset-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_arm64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-arm64.tar.gz
          asset_content_type: application/octet-stream
  
  publish_mac:
    needs: [release]
    name: Upload Release Asset MacOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get the version
        id: get_version
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-macos-universal.tar.gz';
      - name: Checkout submodules
        run: git submodule update --init --force --recursive
      - name: Build project
        run: |
          cd client
          mkdir -p build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL=ON -DBUILD_SHARED_LIBS=OFF
          make -j8
          cd ../..
          mkdir -p lib
          mkdir -p bin
          cp -f client/build/lib/*.a lib
          cp -f client/build/bin/*.dylib bin
          mv -f dist/firmware firmware/
          mv -f client/include include/
          tar -zcvf assets.tar.gz firmware include lib bin LICENSE NOTICE
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}
          asset_content_type: application/octet-stream
