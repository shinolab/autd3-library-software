// File: lpf.cpp
// Project: filter
// Created Date: 08/11/2021
// Author: Shun Suzuki
// -----
// Last Modified: 08/11/2021
// Modified By: Shun Suzuki (suzuki@hapis.k.u-tokyo.ac.jp)
// -----
// Copyright (c) 2021 Hapis Lab. All rights reserved.
//

#include "autd3/modulation/filter/fir.hpp"

#include <iostream>

#include "autd3/core/utils.hpp"

namespace autd::modulation::filter {

void FIR::apply(const core::ModulationPtr& mod) const {
  mod->sampling_freq_div_ratio() = this->_sampling_freq_div;
  mod->rebuild();

  const auto size = mod->buffer().size();

  std::vector<uint8_t> filtered;
  filtered.resize(size);

  for (int32_t i = 0; i < static_cast<int32_t>(size); i++) {
    double r = 0.0;
    for (int32_t j = 0; j < static_cast<int32_t>(this->_coef.size()); j++)
      r += this->_coef[j] * mod->buffer()[core::utils::modulo_positive(i - j, size)];
    filtered[i] = static_cast<uint8_t>(std::round(r));
  }

  std::copy(filtered.begin(), filtered.end(), mod->buffer().begin());
}

FIR FIR::lpf() {
  // equivalent for FPGA implementation
  return FIR(
      2,
      {-0.0000094, -0.0000126, -0.0000163, -0.0000205, -0.0000252, -0.0000305, -0.0000362, -0.0000424, -0.0000491, -0.0000563, -0.0000638, -0.0000717,
       -0.0000798, -0.0000881, -0.0000964, -0.0001047, -0.0001127, -0.0001204, -0.0001275, -0.0001339, -0.0001392, -0.0001433, -0.0001458, -0.0001465,
       -0.0001451, -0.0001412, -0.0001345, -0.0001245, -0.000111,  -0.0000934, -0.0000713, -0.0000444, -0.0000121, 0.0000261,  0.0000706,  0.0001219,
       0.0001805,  0.0002468,  0.0003214,  0.0004048,  0.0004973,  0.0005995,  0.0007118,  0.0008347,  0.0009684,  0.0011134,  0.00127,    0.0014385,
       0.0016192,  0.0018123,  0.0020179,  0.0022362,  0.0024672,  0.0027111,  0.0029676,  0.0032367,  0.0035184,  0.0038122,  0.004118,   0.0044353,
       0.0047638,  0.0051029,  0.0054522,  0.0058109,  0.0061784,  0.0065539,  0.0069366,  0.0073256,  0.0077201,  0.0081189,  0.0085211,  0.0089255,
       0.0093311,  0.0097367,  0.0101411,  0.0105431,  0.0109414,  0.0113347,  0.0117218,  0.0121015,  0.0124724,  0.0128332,  0.0131828,  0.01352,
       0.0138434,  0.014152,   0.0144447,  0.0147204,  0.014978,   0.0152166,  0.0154353,  0.0156333,  0.0158098,  0.0159642,  0.0160959,  0.0162043,
       0.016289,   0.0163498,  0.0163864,  0.0163986,  0.0163864,  0.0163498,  0.016289,   0.0162043,  0.0160959,  0.0159642,  0.0158098,  0.0156333,
       0.0154353,  0.0152166,  0.014978,   0.0147204,  0.0144447,  0.014152,   0.0138434,  0.01352,    0.0131828,  0.0128332,  0.0124724,  0.0121015,
       0.0117218,  0.0113347,  0.0109414,  0.0105431,  0.0101411,  0.0097367,  0.0093311,  0.0089255,  0.0085211,  0.0081189,  0.0077201,  0.0073256,
       0.0069366,  0.0065539,  0.0061784,  0.0058109,  0.0054522,  0.0051029,  0.0047638,  0.0044353,  0.004118,   0.0038122,  0.0035184,  0.0032367,
       0.0029676,  0.0027111,  0.0024672,  0.0022362,  0.0020179,  0.0018123,  0.0016192,  0.0014385,  0.00127,    0.0011134,  0.0009684,  0.0008347,
       0.0007118,  0.0005995,  0.0004973,  0.0004048,  0.0003214,  0.0002468,  0.0001805,  0.0001219,  0.0000706,  0.0000261,  -0.0000121, -0.0000444,
       -0.0000713, -0.0000934, -0.000111,  -0.0001245, -0.0001345, -0.0001412, -0.0001451, -0.0001465, -0.0001458, -0.0001433, -0.0001392, -0.0001339,
       -0.0001275, -0.0001204, -0.0001127, -0.0001047, -0.0000964, -0.0000881, -0.0000798, -0.0000717, -0.0000638, -0.0000563, -0.0000491, -0.0000424,
       -0.0000362, -0.0000305, -0.0000252, -0.0000205, -0.0000163, -0.0000126, -0.0000094});
}

}  // namespace autd::modulation::filter
