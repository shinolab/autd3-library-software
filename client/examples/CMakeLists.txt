cmake_minimum_required(VERSION 3.1)

set (CMAKE_CXX_STANDARD 17)

include_directories(${PROJECT_SOURCE_DIR}/include ${EIGEN_PATH} examples)

file(GLOB hpp_files examples/*.hpp)

if(ENABLE_PRIMITIVE_GAIN)
  add_definitions(-DENABLE_PRIMITIVE_GAIN)
endif()
if(ENABLE_PRIMITIVE_MODULATION)
  add_definitions(-DENABLE_PRIMITIVE_MODULATION)
endif()
if(ENABLE_HOLO_GAIN)
  add_definitions(-DENABLE_HOLO_GAIN)
endif()
if(ENABLE_PRIMITIVE_SEQUENCE)
  add_definitions(-DENABLE_PRIMITIVE_SEQUENCE)
endif()

link_libraries(autd3)
if(ENABLE_PRIMITIVE_MODULATION)
  link_libraries(modulation_primitive)
endif()
if(ENABLE_PRIMITIVE_GAIN)
  link_libraries(gain_primitive)
endif()
if(ENABLE_PRIMITIVE_SEQUENCE)
  link_libraries(sequence_primitive)
endif()
if(ENABLE_HOLO_GAIN)
  link_libraries(gain_holo)
endif()
if(WIN32)
  link_libraries(ws2_32.lib)
  link_libraries(winmm.lib)
elseif(APPLE)
  link_libraries(pcap)
else()
  link_libraries(rt)
endif()
  
if(ENABLE_SOEM_LINK)
  add_executable(example_soem soem.cpp ${hpp_files})
  target_link_libraries(example_soem link_soem)
endif()

if(ENABLE_DEBUG_LINK)
  add_executable(example_debug debug.cpp ${hpp_files})
  target_link_libraries(example_debug autd3 link_debug)
endif()

if(WIN32)
  if(ENABLE_TWINCAT_LINK)
    add_executable(example_twincat twincat.cpp ${hpp_files})
    target_link_libraries(example_twincat link_twincat)
  endif()  
  if(ENABLE_EMULATOR_LINK)
    add_executable(example_emulator emulator.cpp ${hpp_files})
    target_link_libraries(example_emulator autd3 link_emulator)
  endif()
endif()
